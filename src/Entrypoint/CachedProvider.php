<?php

namespace inisire\RPC\Entrypoint;

use Symfony\Component\Config\ConfigCacheFactoryInterface;
use Symfony\Component\Config\ConfigCacheInterface;

class CachedProvider
{
    private const ENTRYPOINT_CACHE_FILE = 'rpc_entrypoints.php';

    private ?array $cache = null;

    public function __construct(
        private readonly string                      $cacheDir,
        private readonly ConfigCacheFactoryInterface $cacheFactory,
        private readonly Loader                      $loader,
    )
    {
    }

    /**
     * @param iterable<Entrypoint> $entrypoints
     */
    private function dump(iterable $entrypoints): string
    {
        $serialized = [];

        foreach ($entrypoints as $entrypoint) {
            $serialized[$entrypoint->getName()] = [
                serialize($entrypoint->getInputSchema()),
                serialize($entrypoint->getOutputSchema()),
                serialize($entrypoint->getAuthorization()),
                $entrypoint->getDescription(),
                $entrypoint->getRoot(),
                $entrypoint->getMethod()
            ];
        }

        $rows = '';
        foreach ($serialized as $key => $entrypoint) {
            $rows .= "\t" . '\'' . $key . '\'' . '=>' . '[';
            foreach ($entrypoint as $value) {
                $rows .= '\'' . $value . '\',';
            }
            $rows .= '] ,' . PHP_EOL;
        }

        return <<<EOF
<?php

/**
 * This file has been auto-generated by inisire\RPC\Entrypoint\CachedProvider.
 */

return [
$rows
];

EOF;
    }

    /**
     * @return iterable<Entrypoint>
     */
    public function getEntrypoints(): iterable
    {
        if ($this->cache === null) {
            $cache = $this->cacheFactory->cache($this->cacheDir . '/' . self::ENTRYPOINT_CACHE_FILE, function (ConfigCacheInterface $cache) {
                $collection = $this->loader->load();
                $cache->write($this->dump($collection->getEntrypoints()), $collection->getResources());
            });

            $this->cache = require $cache->getPath();
        }

        foreach ($this->cache as $name => $entrypoint) {
            yield new Entrypoint(
                $name,
                unserialize($entrypoint[0]),
                unserialize($entrypoint[1]),
                $entrypoint[3],
                unserialize($entrypoint[2]),
                $entrypoint[4],
                $entrypoint[5]
            );
        }
    }
}